using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.AspNetCore.Components.RenderTree;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.Extensions.Logging;


namespace Fuzzy.Components
{
	/// <summary>
	/// Implements a fluent interface over <see cref="RenderTreeBuilder"/>, producing newlines
	/// and indentation if the <c>prettyPrint</c> constructor argument is <c>true</c>, as well as
	/// automatically generating sequence numbers for all frames in the render tree based on the
	/// calling source code line number.
	/// </summary>
	/// <remarks>
	/// <see cref="IDisposable"/> is implemented in order to check that calls to
	/// <see cref="OpenComponent">OpenComponent</see>, <see cref="OpenElement">OpenElement</see>
	/// and <see cref="OpenRegion">OpenRegion</see> are matched with calls to
	/// <see cref="Close">Close</see>, if required.
	/// <para>
	/// Sequence numbers generated are 10 times the source code line number from where each
	/// method is called, which allows for multiple frames on the same line as well as additional
	/// frames auto-generated from high level extension methods such as
	/// <see cref="FluentRenderTreeBuilderExtensions.ComponentDiv">ComponentDiv</see>, in which case
	/// the additional frames will be given incremental sequence numbers. See the following example
	/// for more details.
	/// </para>
	/// </remarks>
	/// <example>
	/// The following code snippet is taken from <c>MainLayoutFluent.cs</c> in the accompanying
	/// TestApp:
	/// <code language="c#">
	/// line 17:        protected override void BuildRenderTree(RenderTreeBuilder builder)
	/// line 18:           => builder.Build()
	/// line 19:               .ComponentDiv{NavMenu}("sidebar")
	/// line 20:               .NewLine();
	/// line 21:               .OpenDiv("main", "body")
	/// line 22:                   .Div(_aboutLink, "top-row px-4")
	/// line 23:                   .ContentDiv(Body, "content px-4")
	/// line 24:               .Close();
	/// </code>
	/// In the above, the <see cref="RenderTreeBuilder.OpenElement">OpenElement</see> call
	/// generated by the <see cref="FluentRenderTreeBuilderExtensions.ComponentDiv">ComponentDiv</see>
	/// call on line 19 will be given sequence number <c>190</c>; the following
	/// <see cref="RenderTreeBuilder.AddAttribute(int, string, string)">AddAttribute</see> call to
	/// set the <c>class</c> attribute to <c>sidebar</c>, also generated by the same
	/// <c>ComponentDiv</c> call will be given sequence number <c>191</c> (as it's generated from
	/// the same source code line but must have a unique sequence number, so it's bumped up by 1); and
	/// similarly the <see cref="RenderTreeBuilder.OpenComponent{TComponent}(int)">OpenComponent</see>
	/// call generated for the <c>NavMenu</c> component will be given sequence number <c>192</c>
	/// (as again it's generated from the same source code line).
	/// <para>
	/// Note that if the <c>prettyPrint</c> parameter is <c>true</c> either in the
	/// <see cref="RenderTreeBuilderExtensions.Build">Build</see> extension call or the
	/// <see cref="FluentRenderTreeBuilder.FluentRenderTreeBuilder">FluentRenderTreeBuilder</see>
	/// constructor (which it is by default so that the output matches the <c>RenderTreeBuilder</c>
	/// output), there are additional markup frames generated for the newline/indent text passed
	/// to a <c>builder.AddMarkup()</c> call preceding each <c>builder.OpenElement</c>,
	/// <c>builder.OpenComponent</c> and <c>builder.Close</c> call, so those markup frames will
	/// be given their own sequence numbers and the example sequence mentioned numbers
	/// given above will be different accordingly.
	/// </para><para>
	/// The <see cref="RenderTreeBuilder.AddMarkupContent">AddMarkupContent</see> call generated
	/// by the <see cref="NewLine"/> call on line 20 will be given sequence number <c>200</c>.
	/// </para><para>
	/// The <see cref="FluentRenderTreeBuilderExtensions.OpenDiv">OpenDiv</see> call on line 21
	/// will result in a call to <see cref="RenderTreeBuilder.OpenElement">OpenElement</see> with
	/// sequence number <c>210</c> followed by a call to
	/// <see cref="RenderTreeBuilder.AddAttribute(int, string, string)">AddAttribute</see> with
	/// sequence number <c>211</c> to set the <c>id</c> to <c>body</c> and another call to
	/// <see cref="RenderTreeBuilder.AddAttribute(int, string, string)">AddAttribute</see> with
	/// sequence number <c>212</c> to set the <c>class</c> to <c>main</c>.
	/// </para><para>
	/// Next, the <see cref="FluentRenderTreeBuilderExtensions.Div">Div</see> call on line 22 will
	/// result in a call to <see cref="RenderTreeBuilder.OpenElement">OpenElement</see> with
	/// sequence number <c>220</c>, followed by a call to
	/// <see cref="RenderTreeBuilder.AddMarkupContent">AddMarkupContent</see> for the
	/// <c>_aboutLink</c> text, with sequence 220 and another
	/// <see cref="RenderTreeBuilder.AddAttribute(int, string, string)">AddAttribute</see> call
	/// as above to set the <c>class</c> attribute, with sequence 221. Likewise, the
	/// <see cref="FluentRenderTreeBuilderExtensions.ContentDiv">ContentDiv</see> call on line 23
	/// results in another call to <see cref="RenderTreeBuilder.OpenElement">OpenElement</see>,
	/// with sequence number <c>230</c>, followed by a call to
	/// <see cref="RenderTreeBuilder.AddAttribute(int, string, string)">AddAttribute</see> to set
	/// the <c>class</c> attribute, with sequence number <c>231</c>, and a call to
	/// <see cref="RenderTreeBuilder.AddContent(int, RenderFragment)">AddContent</see> for the
	/// layout's <c>Body</c> <see cref="RenderFragment"/>, with sequence number <c>232</c>.
	/// </para><para>
	/// Finally, no sequence number will be generated for the <see cref="Close"/> call on
	/// line 24 as a sequence parameter isn't required for the
	/// <see cref="RenderTreeBuilder.CloseElement">CloseElement</see> call.
	/// </para><para>
	/// <strong>Note:</strong> If the <c>prettyPrint</c> parameter is <c>true</c> in either the
	/// <see cref="RenderTreeBuilderExtensions.Build">Build</see> extension call or the
	/// <see cref="FluentRenderTreeBuilder.FluentRenderTreeBuilder">FluentRenderTreeBuilder</see>
	/// constructor (which it is by default so that the output matches the <c>RenderTreeBuilder</c>
	/// output), there are additional markup frames generated for the newline/indent text passed
	/// to a <c>builder.AddMarkup()</c> call preceding each <c>builder.OpenElement</c>,
	/// <c>builder.OpenComponent</c> and <c>builder.Close</c> call, so those markup frames will
	/// be given their own sequence numbers and the example sequence mentioned numbers
	/// given above will be different accordingly.
	/// </para>
	/// </example>
	public class FluentRenderTreeBuilder: IDisposable
	{
		#region Helper Types

		enum FrameType
		{
			Component,
			Element,
			Region
		}

		#endregion Helper Types

		#region Fields

		/// <summary>
		/// Specifies the default maximum number of frames (correlating to calls to methods of
		/// <see cref="RenderTreeBuilder"/>) allowed for a single source code line.
		/// </summary>
		public const int MAX_FRAMES_PER_LINE = 10;

		readonly Stack<FrameType> _frames = new Stack<FrameType>();
		readonly RenderTreeBuilder _builder = default!;
		readonly bool _prettyPrint;
		readonly int _initialIndent;
		readonly int _maxPerLine;
		readonly ILogger? _logger;

		int _currentLine;
		int _sequence;

		#endregion Fields

		#region Properties

		/// <summary>
		/// Gets the current indent level for pretty-printing, if enabled.
		/// </summary>
		public int CurrentIndent => _frames.Count;

		/// <summary>
		/// Indicates whether pretty-printing is enabled.
		/// </summary>
		public bool PrettyPrinting => _prettyPrint;

		#endregion Properties

		#region Construction

		/// <summary>
		/// Creates a new instance of <see cref="FluentRenderTreeBuilder"/>.
		/// </summary>
		/// <param name="builder">The <see cref="RenderTreeBuilder"/> to use for building the render tree.</param>
		/// <param name="prettyPrint"><c>true</c> to add whitespace (newlines and indents) around block elements.</param>
		/// <param name="initialIndent">If <paramref name="prettyPrint"/> is <c>true</c>, the initial indentation level for block elements.</param>
		/// <param name="maxPerLine">The maximum number of frames that can be generated per source code line (including pretty printing whitespace).</param>
		/// <param name="logger">The optional <see cref="ILogger{TCategoryName}"/> implementation to use for logging.</param>
		public FluentRenderTreeBuilder (RenderTreeBuilder builder,
					bool prettyPrint, int initialIndent, int maxPerLine = MAX_FRAMES_PER_LINE,
					ILogger? logger = null)
		{
			_builder = builder;
			_prettyPrint = prettyPrint;
			_initialIndent = initialIndent;
			_maxPerLine = maxPerLine;
			_logger = logger;
		}

		/// <summary>
		/// Checks that calls to <see cref="OpenComponent">OpenComponent</see>,
		/// <see cref="OpenElement">OpenElement</see> and <see cref="OpenRegion">OpenRegion</see>
		/// are matched with calls to <see cref="Close"/>.
		/// </summary>
		/// <exception cref="InvalidOperationException">Unbalanced Open/Close calls</exception>
		public void Dispose()
		{
			if (_frames.Any())
				throw new InvalidOperationException("Unbalanced Open/Close calls");

			PrettyPrint();
		}

		#endregion Construction

		#region Methods

#pragma warning disable BL0006 // Do not use RenderTree types

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddAttribute(int, in RenderTreeFrame)">AddAttribute</see>
		/// to add the given <see cref="RenderTreeFrame"/> as an attribute.
		/// </summary>
		/// <param name="frame">The <c>RenderTreeFrame</c> to add.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Attribute(RenderTreeFrame frame,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddAttribute(GetSequence(line), frame);
			return this;
		}

#pragma warning restore BL0006 // Do not use RenderTree types

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddAttribute(int, string, bool)">AddAttribute</see>
		/// to add the given <c>bool</c> as an attribute.
		/// </summary>
		/// <param name="name">The attribute name.</param>
		/// <param name="value">The <c>bool</c> value to add.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Attribute(string name, bool value,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddAttribute(GetSequence(line), name, value);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddAttribute(int, string, EventCallback)">AddAttribute</see>
		/// to add the given <see cref="EventCallback"/> as an attribute.
		/// </summary>
		/// <param name="name">The attribute name.</param>
		/// <param name="callback">The callback to add.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Attribute(string name, EventCallback callback,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddAttribute(GetSequence(line), name, callback);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddAttribute(int, string, MulticastDelegate)">AddAttribute</see>
		/// to add the given <see cref="MulticastDelegate"/> as an attribute.
		/// </summary>
		/// <param name="name">The attribute name.</param>
		/// <param name="delegate">The <c>delegate</c> to add.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Attribute(string name, MulticastDelegate @delegate,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddAttribute(GetSequence(line), name, @delegate);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddAttribute(int, string, object)">AddAttribute</see>
		/// to add the given <c>object</c> as an attribute.
		/// </summary>
		/// <param name="name">The attribute name.</param>
		/// <param name="value">The <c>object</c> to add.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Attribute(string name, object value,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddAttribute(GetSequence(line), name, value);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddAttribute(int, string, string)">AddAttribute</see>
		/// to add the given <c>string</c> as an attribute.
		/// </summary>
		/// <param name="name">The attribute name.</param>
		/// <param name="value">The <c>string</c> to add.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Attribute(string name, string value,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddAttribute(GetSequence(line), name, value);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddAttribute{TArgument}(int, string, EventCallback{TArgument})">AddAttribute</see>
		/// to add the given <see cref="EventCallback{TArgument}"/> as an attribute.
		/// </summary>
		/// <typeparam name="TArgument">The <see cref="Type"/> of the <c>EventCallback</c> argument.</typeparam>
		/// <param name="name">The attribute name.</param>
		/// <param name="callback">The <c>object</c> to add.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Attribute<TArgument>(string name, EventCallback<TArgument> callback,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddAttribute(GetSequence(line), name, callback);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.OpenComponent(int, Type)">OpenComponent</see> to
		/// add a component of the given type as a block element.
		/// </summary>
		/// <remarks>
		/// Note: Each call to this method must be matched with a call to
		/// <see cref="Close(bool, int)">Close</see>.
		/// </remarks>
		/// <param name="type">The <see cref="Type"/> of the component to open.</param>
		/// <param name="prettyPrint"><c>false</c> to prevent insertion of newline and indent
		/// whitespace before the markup for this element, even if pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder OpenComponent(Type type, bool prettyPrint = true,
				[CallerLineNumber] int line = 0)
		{
			if (prettyPrint)
				PrettyPrint(line);

			_builder.OpenComponent(GetSequence(line), type);
			_frames.Push(FrameType.Component);

			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.OpenComponent{TComponent}(int)">OpenComponent</see>
		/// to add a component of the given type as a block element.
		/// </summary>
		/// <remarks>
		/// Note: Each call to this method must be matched with a call to
		/// <see cref="Close(bool, int)">Close</see>.
		/// </remarks>
		/// <typeparam name="TComponent">The <see cref="Type"/> of the component to open.</typeparam>
		/// <param name="prettyPrint"><c>false</c> to prevent insertion of newline and indent
		/// whitespace before the markup for this element, even if pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder OpenComponent<TComponent>(bool prettyPrint = true,
				[CallerLineNumber] int line = 0)
			where TComponent : IComponent
		{
			if (prettyPrint)
				PrettyPrint(line);

			_builder.OpenComponent<TComponent>(GetSequence(line));
			_frames.Push(FrameType.Component);

			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddComponentReferenceCapture(int, Action{object})">AddComponentReferenceCapture</see>
		/// to capture a reference to the parent component.
		/// </summary>
		/// <param name="action">The action to be invoked whenever the referenced value changes.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ComponentReferenceCapture(Action<object> action,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddComponentReferenceCapture(GetSequence(line), action);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddMarkupContent(int, string)">AddMarkupContent</see>
		/// to add the given markup string.
		/// </summary>
		/// <param name="markup">The markup content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Content(MarkupString markup, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
			=> Markup(markup.Value, prettyPrint, line);

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddContent(int, object)">AddContent</see> to add the
		/// text value of the given content.
		/// </summary>
		/// <param name="content">The content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Content(object content, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			if (prettyPrint)
				PrettyPrint(line);

			_builder.AddContent(GetSequence(line), content);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddContent(int, string)">AddContent</see> to add the
		/// given text content.
		/// </summary>
		/// <param name="content">The text content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Content(string content, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			if (prettyPrint)
				PrettyPrint(line);

			_builder.AddContent(GetSequence(line), content);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddContent(int, RenderFragment)">AddContent</see>
		/// to add the given fragment of content.
		/// </summary>
		/// <param name="fragment">The <see cref="RenderFragment"/> to generate the content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Content(RenderFragment fragment, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			if (prettyPrint)
				PrettyPrint(line);

			_builder.AddContent(GetSequence(line), fragment);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddContent(int, RenderFragment)">AddContent</see>
		/// to add the given fragment of content.
		/// </summary>
		/// <param name="fragment">The <see cref="FluentRenderFragment"/> to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Content(FluentRenderFragment fragment, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
			=> Content((RenderTreeBuilder _) => fragment(this), prettyPrint, line);

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddContent(int, RenderFragment)">AddContent</see>
		/// to add the given fragment of content.
		/// </summary>
		/// <typeparam name="TValue">The <see cref="Type"/> of the value used by the fragment.</typeparam>
		/// <param name="fragment">The <see cref="RenderFragment{TValue}"/> to add.</param>
		/// <param name="value">The value used by the fragment.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Content<TValue>(RenderFragment<TValue> fragment, TValue value,
				bool prettyPrint = false, [CallerLineNumber] int line = 0)
			=> Content(fragment(value), prettyPrint, line);

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddContent(int, RenderFragment)">AddContent</see>
		/// to add the given fragment of content.
		/// </summary>
		/// <typeparam name="TValue">The <see cref="Type"/> of the value used by the fragment.</typeparam>
		/// <param name="fragment">The <see cref="FluentRenderFragment{TValue}"/> to add.</param>
		/// <param name="value">The value used by the fragment.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Content<TValue>(FluentRenderFragment<TValue> fragment, TValue value,
				bool prettyPrint = false, [CallerLineNumber] int line = 0)
			=> Content(fragment(value), prettyPrint, line);

		/// <summary>
		/// Adds a <c>ChildContent</c> attribute with a <see cref="RenderFragment"/> value which
		/// will generate the given child content.
		/// </summary>
		/// <remarks>
		/// Note: This method may only be called where an attribute can be added to an open component.
		/// </remarks>
		/// <param name="markup">The child content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ChildContent(MarkupString markup, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			var indent = CurrentIndent; // capture

			return Attribute("ChildContent",
					(RenderFragment) (b => b.Build(_prettyPrint, indent, _maxPerLine, _logger)
						.Content(markup, prettyPrint, line)
						.PrettyPrint(line, offset: -1, forcePrettyPrint: prettyPrint)),
					line);
		}

		/// <summary>
		/// Adds a <c>ChildContent</c> attribute with a <see cref="RenderFragment"/> value which
		/// will generate the given child content.
		/// </summary>
		/// <remarks>
		/// Note: This method may only be called where an attribute can be added to an open component.
		/// </remarks>
		/// <param name="content">The child content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ChildContent(object content, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			var indent = CurrentIndent; // capture

			return Attribute("ChildContent",
					(RenderFragment) (b => b.Build(_prettyPrint, indent, _maxPerLine, _logger)
						.Content(content, prettyPrint, line)
						.PrettyPrint(line, offset: -1, forcePrettyPrint: prettyPrint)),
					line);
		}

		/// <summary>
		/// Adds a <c>ChildContent</c> attribute with a <see cref="RenderFragment"/> value which
		/// will generate the given child content.
		/// </summary>
		/// <remarks>
		/// Note: This method may only be called where an attribute can be added to an open component.
		/// </remarks>
		/// <param name="content">The child content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ChildContent(string content, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			var indent = CurrentIndent; // capture

			return Attribute("ChildContent",
					(RenderFragment) (b => b.Build(_prettyPrint, indent, _maxPerLine, _logger)
						.Content(content, prettyPrint, line)
						.PrettyPrint(line, offset: -1, forcePrettyPrint: prettyPrint)),
					line);
		}

		/// <summary>
		/// Adds a <c>ChildContent</c> attribute with a <see cref="RenderFragment"/> value which
		/// invokes the given <paramref name="fragment"/> to generate the child content.
		/// </summary>
		/// <remarks>
		/// Note: This method may only be called where an attribute can be added to an open component.
		/// </remarks>
		/// <param name="fragment">The <see cref="RenderFragment"/> to generate the child content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ChildContent(RenderFragment fragment, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			var indent = CurrentIndent; // capture

			return  Attribute("ChildContent",
					(RenderFragment) (b => b.Build(_prettyPrint, indent, _maxPerLine, _logger)
						.Content(fragment, prettyPrint, line)
						.PrettyPrint(line, offset: -1, forcePrettyPrint: prettyPrint)),
					line);
		}

		/// <summary>
		/// Adds a <c>ChildContent</c> attribute with a <see cref="RenderFragment"/> value which
		/// invokes the given <paramref name="fragment"/> to generate the child content.
		/// </summary>
		/// <remarks>
		/// Note: This method may only be called where an attribute can be added to an open component.
		/// </remarks>
		/// <param name="fragment">The <see cref="FluentRenderFragment"/> to generate the child content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ChildContent(FluentRenderFragment fragment, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			var indent = CurrentIndent; // capture

			return Attribute("ChildContent",
					(RenderFragment) (b => b.Build(_prettyPrint, indent, _maxPerLine, _logger)
						.Content(fragment, prettyPrint, line)
						.PrettyPrint(line, offset: -1, forcePrettyPrint: prettyPrint)),
					line);
		}

		/// <summary>
		/// Adds a <c>ChildContent</c> attribute with a <see cref="RenderFragment"/> value which
		/// invokes the given <paramref name="fragment"/> to generate the child content.
		/// </summary>
		/// <remarks>
		/// Note: This method may only be called where an attribute can be added to an open component.
		/// </remarks>
		/// <typeparam name="TValue">The <see cref="Type"/> of the value used by the fragment.</typeparam>
		/// <param name="fragment">The <see cref="FluentRenderFragment"/> to generate the child content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ChildContent<TValue>(RenderFragment<TValue> fragment,
				bool prettyPrint = false, [CallerLineNumber] int line = 0)
		{
			var indent = CurrentIndent; // capture

			return Attribute("ChildContent",
					(RenderFragment) (b => b.Build(_prettyPrint, indent, _maxPerLine, _logger)
						.Content(fragment, prettyPrint, line)
						.PrettyPrint(line, offset: -1, forcePrettyPrint: prettyPrint)),
					line);
		}

		/// <summary>
		/// Adds a <c>ChildContent</c> attribute with a <see cref="RenderFragment"/> value which
		/// invokes the given <paramref name="fragment"/> to generate the child content.
		/// </summary>
		/// <remarks>
		/// Note: This method may only be called where an attribute can be added to an open component.
		/// </remarks>
		/// <typeparam name="TValue">The <see cref="Type"/> of the value used by the fragment.</typeparam>
		/// <param name="fragment">The <see cref="RenderFragment"/> to generate the child content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ChildContent<TValue>(FluentRenderFragment<TValue> fragment,
				bool prettyPrint = false, [CallerLineNumber] int line = 0)
		{
			var indent = CurrentIndent; // capture

			return Attribute("ChildContent",
					(RenderFragment) (b => b.Build(_prettyPrint, indent, _maxPerLine, _logger)
						.Content(fragment, prettyPrint, line)
						.PrettyPrint(line, offset: -1, forcePrettyPrint: prettyPrint)),
					line);
		}

		/// <summary>
		/// Adds an <c>onclick</c> attribute which calls the given <paramref name="callback"/>
		/// when the mouse is clicked.
		/// </summary>
		/// <param name="receiver">The receiving component.</param>
		/// <param name="callback">The callback action.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder OnClick(object receiver, Action callback,
				[CallerLineNumber] int line = 0)
			=> Attribute("onclick", EventCallback.Factory.Create<MouseEventArgs>(receiver, callback), line);

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.OpenElement(int, string)">OpenElement</see> to
		/// add a block element.
		/// </summary>
		/// <remarks>
		/// Note: Each call to this method must be matched with a call to
		/// <see cref="Close(bool, int)">Close</see>.
		/// </remarks>
		/// <param name="name">The name of the element to add.</param>
		/// <param name="prettyPrint"><c>false</c> to prevent insertion of newline and indent
		/// whitespace before the markup for this element, even if pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder OpenElement(string name, bool prettyPrint = true,
				[CallerLineNumber] int line = 0)
		{
			if (prettyPrint)
				PrettyPrint(line);

			_builder.OpenElement(GetSequence(line), name);
			_frames.Push(FrameType.Element);

			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddElementReferenceCapture(int, Action{ElementReference})">AddElementReferenceCapture</see>
		/// to capture a reference to the parent element.
		/// </summary>
		/// <param name="action">The action to be invoked whenever the referenced value changes.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder ElementReferenceCapture(Action<ElementReference> action,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddElementReferenceCapture(GetSequence(line), action);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddMarkupContent(int, string)">AddMarkupContent</see>
		/// to add the given markup content.
		/// </summary>
		/// <param name="markup">The markup content to add.</param>
		/// <param name="prettyPrint"><c>true</c> to insert newline and indent whitespace before
		/// the markup for this element, as long as pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder Markup(object markup, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
		{
			if (prettyPrint)
				PrettyPrint(line);

			_builder.AddMarkupContent(GetSequence(line), markup.ToString());
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.AddMultipleAttributes(int, IEnumerable{KeyValuePair{string, object}})">AddMultipleAttributes</see>
		/// to add the given attributes.
		/// </summary>
		/// <param name="attributes">The attributes to add.</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder MultipleAttributes(
				IEnumerable<KeyValuePair<string, object>> attributes,
				[CallerLineNumber] int line = 0)
		{
			_builder.AddMultipleAttributes(GetSequence(line), attributes);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.OpenRegion(int)">OpenRegion</see> to add a region.
		/// </summary>
		/// <remarks>
		/// Note: Each call to this method must be matched with a call to
		/// <see cref="Close(bool, int)">Close</see>.
		/// </remarks>
		/// <param name="prettyPrint"><c>false</c> to prevent insertion of newline and indent
		/// whitespace before the markup for this element, even if pretty-printing is enabled (see
		/// the <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder OpenRegion(bool prettyPrint = true,
				[CallerLineNumber] int line = 0)
		{
			if (prettyPrint)
				PrettyPrint(line);

			_builder.OpenRegion(GetSequence(line));
			_frames.Push(FrameType.Region);

			return this;
		}

		/// <summary>Calls <see cref="RenderTreeBuilder.Clear"/> to clear the builder.</summary>
		public FluentRenderTreeBuilder Clear()
		{
			_builder.Clear();
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.GetFrames"/> to get the
		/// <see cref="RenderTreeFrame"/>s that have been appended.
		/// </summary>
		/// <returns></returns>
		public ArrayRange<RenderTreeFrame> GetFrames()
			=> _builder.GetFrames();

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.SetKey(object)"/> to assign the specified key to
		/// the current element or component.
		/// </summary>
		/// <param name="value">The key value.</param>
		public FluentRenderTreeBuilder SetKey(object value)
		{
			_builder.SetKey(value);
			return this;
		}

		/// <summary>
		/// Calls <see cref="RenderTreeBuilder.SetUpdatesAttributeName(string)">SetUpdatesAttributeName</see>
		/// to indicate that the preceding attribute represents an event handler whose execution
		/// updates the attribute with given name.
		/// </summary>
		/// <param name="name">The name of another attribute to be updated when its event handler is executed.</param>
		public FluentRenderTreeBuilder SetUpdatesAttributeName(string name)
		{
			_builder.SetUpdatesAttributeName(name);
			return this;
		}

		/// <summary>
		/// Generates markup to close last opened <c>Region</c>, <c>Element</c> or <c>Component</c>
		/// block.
		/// </summary>
		/// <remarks>
		/// Calls to this method must match calls to <see cref="OpenRegion(bool, int)">OpenRegion</see>,
		/// <see cref="OpenElement(string, bool, int)">OpenElement</see> and
		/// <see cref="OpenComponent(Type, bool, int)">OpenComponent</see>.
		/// </remarks>
		/// <returns></returns>
		public FluentRenderTreeBuilder Close(bool prettyPrint = true,
				[CallerLineNumber] int line = 0)
		{
			// pop this first so PrettyPrint below produces the correct indent
			var frameType = _frames.Pop();

			if (prettyPrint)
				PrettyPrint(line);

			switch (frameType)
			{
				case FrameType.Region: _builder.CloseRegion(); break;
				case FrameType.Element: _builder.CloseElement(); break;
				case FrameType.Component: _builder.CloseComponent(); break;
			};

			return this;
		}

		#region Utility Methods

		/// <summary>
		/// Adds a number of newlines (defaulting to one) as markup content, with optionally an
		/// indent following the last (or only) one, if <paramref name="prettyPrint"/> is
		/// <c>true</c> and pretty-printing is enabled.
		/// </summary>
		/// <remarks>
		/// This method is cosmetic, simply inserting line breaks in the generated markup.
		/// </remarks>
		/// <param name="number"></param>
		/// <param name="prettyPrint"><c>true</c> to insert indent whitespace following the
		/// last (or only) newline added, as long as pretty-printing is enabled (see the
		/// <see cref="FluentRenderTreeBuilder"/> overview for details on pretty-printing).</param>
		/// <param name="line">The source code line number used to generate the sequence number.</param>
		public FluentRenderTreeBuilder NewLine(int number = 1, bool prettyPrint = false,
				[CallerLineNumber] int line = 0)
			=> PrettyPrint(line, 0, number, prettyPrint, forceNewlines: true);

		/// <summary>
		/// Resets the internal sequence number for the current source code line.
		/// </summary>
		/// <remarks>
		/// Use this method when a specific source line might generate more than the maximum number
		/// of frames for a single line (defaults to <see cref="MAX_FRAMES_PER_LINE"/>).
		/// </remarks>
		public FluentRenderTreeBuilder SameLine()
		{
			_sequence = _currentLine * _maxPerLine;
			return this;
		}

		FluentRenderTreeBuilder PrettyPrint(int line = -1, int offset = 0,
				int newlineCount = 1, bool? forcePrettyPrint = null, bool forceNewlines = false)
		{
			var doIndent = _prettyPrint && forcePrettyPrint != false;
			var doNewlines = doIndent || forceNewlines;

			if (!doIndent && !doNewlines)
				return this; // nothing to do

			if (line == -1)
				line = _currentLine;

			// STILL no `new string ("string", n)` in C#/.NET, so do it with string.Replace() :(
			var newlines = !doNewlines ? "" : newlineCount == 1 ? Environment.NewLine :
				newlineCount > 1 ? new string('X', newlineCount).Replace("X", Environment.NewLine) : "";

			var indent = !doIndent ? "" : new string('\t', _initialIndent + CurrentIndent + offset);

			_builder.AddMarkupContent(GetSequence(line), newlines + indent);

			return this;
		}

		/// <summary>
		/// Gets the sequence number for the given source code line.
		/// </summary>
		/// <remarks>
		/// See the <see cref="FluentRenderTreeBuilder"/> overview for details on sequence number
		/// generation and an example showing how it works.
		/// </remarks>
		/// <param name="line">The source code line from which to generate the sequence number.</param>
		/// <param name="callerName">The name of the calling member.</param>
		int GetSequence(int line, [CallerMemberName] string callerName = "")
		{
			if (line == _currentLine)
			{
				++_sequence;

				if (_sequence == (_currentLine + 1) * _maxPerLine)
					throw new InvalidOperationException(
							$"Only {_maxPerLine} operations allowed on one source code line");
			}
			else
			{
				_currentLine = line;
				_sequence = line * _maxPerLine;
			}

			_logger?.LogInformation($"Sequence number {_sequence} generated for {callerName}");

			return _sequence;
		}

		#endregion Utility Methods

		#endregion Methods
	}

	/// <summary>
	/// Represents a segment of UI content, implemented as a delegate that writes the content to a
	/// <see cref="FluentRenderTreeBuilder"/>.
	/// </summary>
	/// <param name="frtb">The <c>FluentRenderTreeBuilder</c> to which the content should be written.</param>
	public delegate void FluentRenderFragment(FluentRenderTreeBuilder frtb);

	/// <summary>
	/// Represents a segment of UI content for an object of type TValue, implemented as a function
	/// that returns a <see cref="FluentRenderFragment"/>. 
	/// </summary>
	/// <typeparam name="TValue">The type of object.</typeparam>
	/// <param name="value">The value used to build the content.</param>
	public delegate FluentRenderFragment FluentRenderFragment<TValue>(TValue value);
}
